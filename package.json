{
  "name": "cquery",
  "description": "Low-latency language server for C++. Highly scalable and designed for huge code bases.",
  "author": "cquery-project",
  "license": "MIT",
  "version": "0.1.8",
  "publisher": "cquery-project",
  "preview": true,
  "engines": {
    "vscode": "^1.22.0"
  },
  "categories": [
    "Programming Languages"
  ],
  "activationEvents": [
    "onLanguage:c",
    "onLanguage:cpp",
    "onLanguage:objective-c",
    "onLanguage:objective-cpp",
    "workspaceContains:.cquery",
    "workspaceContains:compile_commands.json",
    "workspaceContains:build/compile_commands.json"
  ],
  "main": "./out/extension",
  "contributes": {
    "views": {
      "explorer": [
        {
          "id": "cquery.inheritanceHierarchy",
          "name": "Inheritance Hierarchy",
          "when": "extension.cquery.inheritanceHierarchyVisible"
        },
        {
          "id": "cquery.callHierarchy",
          "name": "Call Hierarchy",
          "when": "extension.cquery.callHierarchyVisible"
        }
      ]
    },
    "menus": {
      "editor/context": [
        {
          "command": "cquery.inheritanceHierarchy",
          "when": "resourceLangId == cpp",
          "group": "navigation@1.31"
        },
        {
          "command": "cquery.callHierarchy",
          "when": "resourceLangId == cpp",
          "group": "navigation@1.32"
        },
        {
          "command": "cquery.vars",
          "when": "resourceLangId == cpp",
          "group": "navigation@1.33"
        },
        {
          "command": "cquery.base",
          "when": "resourceLangId == cpp",
          "group": "navigation@1.34"
        }
      ],
      "view/title": [
        {
          "command": "cquery.closeInheritanceHierarchy",
          "when": "view == cquery.inheritanceHierarchy",
          "group": "navigation"
        },
        {
          "command": "cquery.closeCallHierarchy",
          "when": "view == cquery.callHierarchy",
          "group": "navigation"
        }
      ],
      "view/item/context": [
        {
          "command": "cquery.gotoForTreeView",
          "when": "viewItem == cqueryGoto"
        }
      ],
      "commandPalette": [
        {
          "command": "cquery.closeInheritanceHierarchy",
          "when": "false"
        },
        {
          "command": "cquery.closeCallHierarchy",
          "when": "false"
        },
        {
          "command": "cquery.gotoForTreeView",
          "when": "false"
        }
      ]
    },
    "commands": [
      {
        "title": "Freshen Index",
        "category": "cquery",
        "command": "cquery.freshenIndex"
      },
      {
        "title": "Inheritance Hierarchy",
        "category": "cquery",
        "command": "cquery.inheritanceHierarchy"
      },
      {
        "title": "Close",
        "command": "cquery.closeInheritanceHierarchy"
      },
      {
        "title": "Call Hierarchy",
        "category": "cquery",
        "command": "cquery.callHierarchy"
      },
      {
        "title": "Close",
        "command": "cquery.closeCallHierarchy"
      },
      {
        "title": "Show Variables",
        "category": "cquery",
        "command": "cquery.vars"
      },
      {
        "title": "Show Callers",
        "category": "cquery",
        "command": "cquery.callers"
      },
      {
        "title": "Show Base",
        "category": "cquery",
        "command": "cquery.base"
      },
      {
        "title": "Go to Tree View Entry",
        "category": "cquery",
        "command": "cquery.gotoForTreeView"
      }
    ],
    "configuration": {
      "type": "object",
      "title": "cquery",
      "properties": {
        "cquery.launch.command": {
          "type": "string",
          "default": "cquery",
          "description": "Path to the cquery binary (default assumes the binary is in the PATH)"
        },
        "cquery.launch.args": {
          "type": "array",
          "default": [],
          "description": "Array containing extra arguments to pass to the cquery binary"
        },
        "cquery.launch.autoRestart": {
          "type": "boolean",
          "default": true,
          "description": "If true, cquery will be automatically restarted if it crashes."
        },
        "cquery.launch.notifyOnCrash": {
          "type": "boolean",
          "default": false,
          "description": "If true, a notification message will be displayed whenever cquery crashes."
        },
        "cquery.cacheDirectory": {
          "type": "string",
          "default": "",
          "description": "Absolute path to the directory that the cached index will be stored in. Try to have this directory on an SSD. If not explicitly set, this will be automatically populated with the extension cache directory.\n\n${workspaceFolder} will be replaced by the folder where .vscode/settings.json resides.\n\nCache directories are project-wide, so this should be configured in the workspace settings so multiple indexes do not clash.\n\nExample value: \"/work/cquery-cache/chrome/\""
        },
        "cquery.developer.emitQueryDbBlocked": {
          "type": "boolean",
          "default": false,
          "description": "If true, a notification will be shown whenever the querydb thread is busy."
        },
        "cquery.highlighting.enabled.types": {
          "type": "boolean",
          "default": false,
          "description": "If semantic highlighting for classes, structs, and unions is enabled/disabled."
        },
        "cquery.highlighting.enabled.freeStandingFunctions": {
          "type": "boolean",
          "default": false,
          "description": "If semantic highlighting for member functions is enabled/disabled."
        },
        "cquery.highlighting.enabled.memberFunctions": {
          "type": "boolean",
          "default": false,
          "description": "If semantic highlighting for member functions is enabled/disabled."
        },
        "cquery.highlighting.enabled.freeStandingVariables": {
          "type": "boolean",
          "default": false,
          "description": "If semantic highlighting for member free-standing variables is enabled/disabled."
        },
        "cquery.highlighting.enabled.memberVariables": {
          "type": "boolean",
          "default": false,
          "description": "If semantic highlighting for member variables is enabled/disabled."
        },
        "cquery.highlighting.enabled.namespaces": {
          "type": "boolean",
          "default": false,
          "description": "If semantic highlighting for namespaces is enabled/disabled."
        },
        "cquery.highlighting.enabled.macros": {
          "type": "boolean",
          "default": false,
          "description": "If semantic highlighting for macros is enabled/disabled."
        },
        "cquery.highlighting.enabled.enums": {
          "type": "boolean",
          "default": false,
          "description": "If semantic highlighting for enumerations is enabled/disabled."
        },
        "cquery.highlighting.enabled.typeAliases": {
          "type": "boolean",
          "default": false,
          "description": "If semantic highlighting for type aliases is enabled/disabled."
        },
        "cquery.highlighting.enabled.enumConstants": {
          "type": "boolean",
          "default": false,
          "description": "If semantic highlighting for enumerators is enabled/disabled."
        },
        "cquery.highlighting.enabled.staticMemberFunctions": {
          "type": "boolean",
          "default": false,
          "description": "If semantic highlighting for static member functions is enabled/disabled."
        },
        "cquery.highlighting.enabled.parameters": {
          "type": "boolean",
          "default": false,
          "description": "If semantic highlighting for parameters is enabled/disabled."
        },
        "cquery.highlighting.enabled.templateParameters": {
          "type": "boolean",
          "default": false,
          "description": "If semantic highlighting for template parameters is enabled/disabled."
        },
        "cquery.highlighting.enabled.staticMemberVariables": {
          "type": "boolean",
          "default": false,
          "description": "If semantic highlighting for static member variables is enabled/disabled."
        },
        "cquery.highlighting.enabled.globalVariables": {
          "type": "boolean",
          "default": false,
          "description": "If semantic highlighting for global variables is enabled/disabled."
        },
        "cquery.highlighting.colors.types": {
          "type": "array",
          "default": [
            "#e1afc3",
            "#d533bb",
            "#9b677f",
            "#e350b6",
            "#a04360",
            "#dd82bc",
            "#de3864",
            "#ad3f87",
            "#dd7a90",
            "#e0438a"
          ],
          "description": "Colors to use for semantic highlighting. A good generator is http://tools.medialab.sciences-po.fr/iwanthue/. If multiple colors are specified, semantic highlighting will cycle through them for successive symbols."
        },
        "cquery.highlighting.colors.freeStandingFunctions": {
          "type": "array",
          "default": [
            "#e5b124",
            "#927754",
            "#eb992c",
            "#e2bf8f",
            "#d67c17",
            "#88651e",
            "#e4b953",
            "#a36526",
            "#b28927",
            "#d69855"
          ],
          "description": "Colors to use for semantic highlighting. A good generator is http://tools.medialab.sciences-po.fr/iwanthue/. If multiple colors are specified, semantic highlighting will cycle through them for successive symbols."
        },
        "cquery.highlighting.colors.memberFunctions": {
          "type": "array",
          "default": [
            "#e5b124",
            "#927754",
            "#eb992c",
            "#e2bf8f",
            "#d67c17",
            "#88651e",
            "#e4b953",
            "#a36526",
            "#b28927",
            "#d69855"
          ],
          "description": "Colors to use for semantic highlighting. A good generator is http://tools.medialab.sciences-po.fr/iwanthue/. If multiple colors are specified, semantic highlighting will cycle through them for successive symbols."
        },
        "cquery.highlighting.colors.freeStandingVariables": {
          "type": "array",
          "default": [
            "#587d87",
            "#26cdca",
            "#397797",
            "#57c2cc",
            "#306b72",
            "#6cbcdf",
            "#368896",
            "#3ea0d2",
            "#48a5af",
            "#7ca6b7"
          ],
          "description": "Colors to use for semantic highlighting. A good generator is http://tools.medialab.sciences-po.fr/iwanthue/. If multiple colors are specified, semantic highlighting will cycle through them for successive symbols."
        },
        "cquery.highlighting.colors.memberVariables": {
          "type": "array",
          "default": [
            "#587d87",
            "#26cdca",
            "#397797",
            "#57c2cc",
            "#306b72",
            "#6cbcdf",
            "#368896",
            "#3ea0d2",
            "#48a5af",
            "#7ca6b7"
          ],
          "description": "Colors to use for semantic highlighting. A good generator is http://tools.medialab.sciences-po.fr/iwanthue/. If multiple colors are specified, semantic highlighting will cycle through them for successive symbols."
        },
        "cquery.highlighting.colors.namespaces": {
          "type": "array",
          "default": [
            "#429921",
            "#58c1a4",
            "#5ec648",
            "#36815b",
            "#83c65d",
            "#417b2f",
            "#43cc71",
            "#7eb769",
            "#58bf89",
            "#3e9f4a"
          ],
          "description": "Colors to use for semantic highlighting. A good generator is http://tools.medialab.sciences-po.fr/iwanthue/. If multiple colors are specified, semantic highlighting will cycle through them for successive symbols."
        },
        "cquery.highlighting.colors.macros": {
          "type": "array",
          "default": [
            "#e79528",
            "#c5373d",
            "#e8a272",
            "#d84f2b",
            "#a67245",
            "#e27a33",
            "#9b4a31",
            "#b66a1e",
            "#e27a71",
            "#cf6d49"
          ],
          "description": "Colors to use for semantic highlighting. A good generator is http://tools.medialab.sciences-po.fr/iwanthue/. If multiple colors are specified, semantic highlighting will cycle through them for successive symbols."
        },
        "cquery.highlighting.colors.enums": {
          "type": "array",
          "default": [
            "#e1afc3",
            "#d533bb",
            "#9b677f",
            "#e350b6",
            "#a04360",
            "#dd82bc",
            "#de3864",
            "#ad3f87",
            "#dd7a90",
            "#e0438a"
          ],
          "description": "Colors to use for semantic highlighting. A good generator is http://tools.medialab.sciences-po.fr/iwanthue/. If multiple colors are specified, semantic highlighting will cycle through them for successive symbols."
        },
        "cquery.highlighting.colors.typeAliases": {
          "type": "array",
          "default": [
            "#e1afc3",
            "#d533bb",
            "#9b677f",
            "#e350b6",
            "#a04360",
            "#dd82bc",
            "#de3864",
            "#ad3f87",
            "#dd7a90",
            "#e0438a"
          ],
          "description": "Colors to use for semantic highlighting. A good generator is http://tools.medialab.sciences-po.fr/iwanthue/. If multiple colors are specified, semantic highlighting will cycle through them for successive symbols."
        },
        "cquery.highlighting.colors.staticMemberFunctions": {
          "type": "array",
          "default": [
            "#e5b124",
            "#927754",
            "#eb992c",
            "#e2bf8f",
            "#d67c17",
            "#88651e",
            "#e4b953",
            "#a36526",
            "#b28927",
            "#d69855"
          ],
          "description": "Colors to use for semantic highlighting. A good generator is http://tools.medialab.sciences-po.fr/iwanthue/. If multiple colors are specified, semantic highlighting will cycle through them for successive symbols."
        },
        "cquery.highlighting.colors.enumConstants": {
          "type": "array",
          "default": [
            "#587d87",
            "#26cdca",
            "#397797",
            "#57c2cc",
            "#306b72",
            "#6cbcdf",
            "#368896",
            "#3ea0d2",
            "#48a5af",
            "#7ca6b7"
          ],
          "description": "Colors to use for semantic highlighting. A good generator is http://tools.medialab.sciences-po.fr/iwanthue/. If multiple colors are specified, semantic highlighting will cycle through them for successive symbols."
        },
        "cquery.highlighting.colors.parameters": {
          "type": "array",
          "default": [
            "#587d87",
            "#26cdca",
            "#397797",
            "#57c2cc",
            "#306b72",
            "#6cbcdf",
            "#368896",
            "#3ea0d2",
            "#48a5af",
            "#7ca6b7"
          ],
          "description": "Colors to use for semantic highlighting. A good generator is http://tools.medialab.sciences-po.fr/iwanthue/. If multiple colors are specified, semantic highlighting will cycle through them for successive symbols."
        },
        "cquery.highlighting.colors.templateParameters": {
          "type": "array",
          "default": [
            "#e1afc3",
            "#d533bb",
            "#9b677f",
            "#e350b6",
            "#a04360",
            "#dd82bc",
            "#de3864",
            "#ad3f87",
            "#dd7a90",
            "#e0438a"
          ],
          "description": "Colors to use for semantic highlighting. A good generator is http://tools.medialab.sciences-po.fr/iwanthue/. If multiple colors are specified, semantic highlighting will cycle through them for successive symbols."
        },
        "cquery.highlighting.colors.staticMemberVariables": {
          "type": "array",
          "default": [
            "#587d87",
            "#26cdca",
            "#397797",
            "#57c2cc",
            "#306b72",
            "#6cbcdf",
            "#368896",
            "#3ea0d2",
            "#48a5af",
            "#7ca6b7"
          ],
          "description": "Colors to use for semantic highlighting. A good generator is http://tools.medialab.sciences-po.fr/iwanthue/. If multiple colors are specified, semantic highlighting will cycle through them for successive symbols."
        },
        "cquery.highlighting.colors.globalVariables": {
          "type": "array",
          "default": [
            "#587d87",
            "#26cdca",
            "#397797",
            "#57c2cc",
            "#306b72",
            "#6cbcdf",
            "#368896",
            "#3ea0d2",
            "#48a5af",
            "#7ca6b7"
          ],
          "description": "Colors to use for semantic highlighting. A good generator is http://tools.medialab.sciences-po.fr/iwanthue/. If multiple colors are specified, semantic highlighting will cycle through them for successive symbols."
        },
        "cquery.highlighting.underline.types": {
          "type": "boolean",
          "default": false
        },
        "cquery.highlighting.underline.freeStandingFunctions": {
          "type": "boolean",
          "default": false
        },
        "cquery.highlighting.underline.memberFunctions": {
          "type": "boolean",
          "default": false
        },
        "cquery.highlighting.underline.freeStandingVariables": {
          "type": "boolean",
          "default": false
        },
        "cquery.highlighting.underline.memberVariables": {
          "type": "boolean",
          "default": false
        },
        "cquery.highlighting.underline.namespaces": {
          "type": "boolean",
          "default": false
        },
        "cquery.highlighting.underline.macros": {
          "type": "boolean",
          "default": false
        },
        "cquery.highlighting.underline.enums": {
          "type": "boolean",
          "default": false
        },
        "cquery.highlighting.underline.typeAliases": {
          "type": "boolean",
          "default": false
        },
        "cquery.highlighting.underline.enumConstants": {
          "type": "boolean",
          "default": false
        },
        "cquery.highlighting.underline.staticMemberFunctions": {
          "type": "boolean",
          "default": true
        },
        "cquery.highlighting.underline.parameters": {
          "type": "boolean",
          "default": false
        },
        "cquery.highlighting.underline.templateParameters": {
          "type": "boolean",
          "default": false
        },
        "cquery.highlighting.underline.staticMemberVariables": {
          "type": "boolean",
          "default": true
        },
        "cquery.highlighting.underline.globalVariables": {
          "type": "boolean",
          "default": false
        },
        "cquery.highlighting.italic.types": {
          "type": "boolean",
          "default": false
        },
        "cquery.highlighting.italic.freeStandingFunctions": {
          "type": "boolean",
          "default": false
        },
        "cquery.highlighting.italic.memberFunctions": {
          "type": "boolean",
          "default": true
        },
        "cquery.highlighting.italic.freeStandingVariables": {
          "type": "boolean",
          "default": false
        },
        "cquery.highlighting.italic.memberVariables": {
          "type": "boolean",
          "default": true
        },
        "cquery.highlighting.italic.namespaces": {
          "type": "boolean",
          "default": false
        },
        "cquery.highlighting.italic.macros": {
          "type": "boolean",
          "default": false
        },
        "cquery.highlighting.italic.enums": {
          "type": "boolean",
          "default": false
        },
        "cquery.highlighting.italic.typeAliases": {
          "type": "boolean",
          "default": false
        },
        "cquery.highlighting.italic.enumConstants": {
          "type": "boolean",
          "default": false
        },
        "cquery.highlighting.italic.staticMemberFunctions": {
          "type": "boolean",
          "default": false
        },
        "cquery.highlighting.italic.parameters": {
          "type": "boolean",
          "default": true
        },
        "cquery.highlighting.italic.templateParameters": {
          "type": "boolean",
          "default": false
        },
        "cquery.highlighting.italic.staticMemberVariables": {
          "type": "boolean",
          "default": false
        },
        "cquery.highlighting.italic.globalVariables": {
          "type": "boolean",
          "default": false
        },
        "cquery.highlighting.bold.types": {
          "type": "boolean",
          "default": true
        },
        "cquery.highlighting.bold.freeStandingFunctions": {
          "type": "boolean",
          "default": false
        },
        "cquery.highlighting.bold.memberFunctions": {
          "type": "boolean",
          "default": false
        },
        "cquery.highlighting.bold.freeStandingVariables": {
          "type": "boolean",
          "default": false
        },
        "cquery.highlighting.bold.memberVariables": {
          "type": "boolean",
          "default": false
        },
        "cquery.highlighting.bold.namespaces": {
          "type": "boolean",
          "default": true
        },
        "cquery.highlighting.bold.macros": {
          "type": "boolean",
          "default": false
        },
        "cquery.highlighting.bold.enums": {
          "type": "boolean",
          "default": true
        },
        "cquery.highlighting.bold.typeAliases": {
          "type": "boolean",
          "default": true
        },
        "cquery.highlighting.bold.enumConstants": {
          "type": "boolean",
          "default": true
        },
        "cquery.highlighting.bold.staticMemberFunctions": {
          "type": "boolean",
          "default": false
        },
        "cquery.highlighting.bold.parameters": {
          "type": "boolean",
          "default": false
        },
        "cquery.highlighting.bold.templateParameters": {
          "type": "boolean",
          "default": true
        },
        "cquery.highlighting.bold.staticMemberVariables": {
          "type": "boolean",
          "default": false
        },
        "cquery.highlighting.bold.globalVariables": {
          "type": "boolean",
          "default": false
        },
        "cquery.index.extraClangArguments": {
          "type": "array",
          "default": [],
          "description": "An extra set of command line arguments to give clang when indexing. Each list entry is a separate argument."
        },
        "cquery.index.whitelist": {
          "type": "array",
          "default": [],
          "description": "If a translation unit's absolute path matches any EMCAScript regex in this list, it will be indexed. The whitelist takes priority over the blacklist. To only index files in the whitelist, make \"cquery.index.blacklist\" match everything, ie, set it to \".*\".\n\nYou probably want to begin the regex using \".*\" because the passed paths are absolute."
        },
        "cquery.index.blacklist": {
          "type": "array",
          "default": [],
          "description": "A translation unit (cc/cpp file) is not indexed if any of the EMCAScript regexes in this list matches translation unit's the absolute path.\n\nYou probably want to begin the regex using \".*\" because the passed paths are absolute."
        },
        "cquery.log.skippedPathsForIndex": {
          "type": "boolean",
          "default": false,
          "description": "If true, paths which were skipped by `cquery.index.whitelist` and `cquery.index.blacklist` will be logged and viewable in the cquery output window."
        },
        "cquery.misc.status": {
          "type": "string",
          "default": "short",
          "enum": [
            "short",
            "detailed",
            "off"
          ],
          "description": "Controls the visibility of the status indicator."
        },
        "cquery.misc.resourceDirectory": {
          "type": "string",
          "default": "",
          "description": "Default value to use for clang -resource-dir argument. This will be automatically supplied by cquery if not provided."
        },
        "cquery.misc.maxWorkspaceSearchResults": {
          "type": [
            "number",
            "null"
          ],
          "default": null,
          "description": "The maximum number of global search (ie, Ctrl+P + #foo) search results to report. For small search strings on large projects there can be a massive number of results (ie, over 1,000,000) so this limit is important to avoid extremely long delays. null means use the default value provided by the cquery language server."
        },
        "cquery.misc.indexerCount": {
          "type": "number",
          "default": 0,
          "description": "Forcibly set the number of indexing/working jobs. This value is automatically computed by the indexer and you should not need to set it manually.\n\nIdeally, this should be the number of CPU cores you have, minus one. cquery scales quite well so this number can go very high; cquery will use 5000%+ CPU usage on machines with over 50 cores. If you set the value higher than your number of hardware threads, cquery will slow down significantly due to thread contention.\n\nIf set to 0 or a negative value, the indexer will ignore this value.\n\nFor example, if you have a 4 core hyper-threaded processor, this should be set to 7. If you have dual 13 core hyper-threaded processors, this should be set to 2*13*2-1=51."
        },
        "cquery.misc.enableIndexing": {
          "type": "boolean",
          "default": true,
          "description": "If set to false, updating the index will be disabled. You should not need to use this."
        },
        "cquery.misc.enableCacheWrite": {
          "type": "boolean",
          "default": true,
          "description": "If set to false, writing indexed files out to cache will be disabled. Only useful if |enableIndexing| is true. You should not need to use this."
        },
        "cquery.misc.enableCacheRead": {
          "type": "boolean",
          "default": true,
          "description": "If set to false, restoring the cached index will be disabled. Only useful if there is a cached index stored on disk. You should not need to use this."
        },
        "cquery.misc.compilationDatabaseDirectory": {
          "type": "string",
          "default": "",
          "description": "If not empty, the compilation database directory to use instead of the project root"
        },
        "cquery.misc.showInactiveRegions": {
          "type": "boolean",
          "default": true,
          "description": "If true, cquery will highlight inactive regions."
        },
        "cquery.misc.discoverSystemIncludes": {
          "type": "boolean",
          "default": true,
          "description": "If true, cquery will detect system includes using clang -E."
        },
        "cquery.completion.include.maximumPathLength": {
          "type": "integer",
          "default": 37,
          "description": "Maximum length for path in #include proposals. If the path length goes beyond this number it will be elided. Set to 0 to always display the full path."
        },
        "cquery.completion.include.whitelistLiteralEnding": {
          "type": "array",
          "default": [
            ".h",
            ".hpp",
            ".hh"
          ],
          "description": "Only files ending in one of these values will be shown in include auto-complete. Set to the empty-list to disable include auto-complete."
        },
        "cquery.completion.include.whitelist": {
          "type": "array",
          "default": [],
          "description": "EMCAScript regex that checks absolute file path. If it does not match, the file is not added to include path auto-complete. An example is \".*/src/.*\""
        },
        "cquery.completion.include.blacklist": {
          "type": "array",
          "default": [],
          "description": "EMCAScript regex that checks absolute path. If it matches, the file is not added to include path auto-complete. An example is \".*/CACHE/.*\""
        },
        "cquery.showDocumentLinksOnIncludes": {
          "type": "boolean",
          "default": true,
          "description": "If true, document links (an underline) will be rendered on includes. Goto definition (control click) will still work on includes even if this is false."
        },
        "cquery.diagnostics.blacklist": {
          "type": "array",
          "default": [],
          "description": "Files that match these patterns won't be displayed in diagnostics view."
        },
        "cquery.diagnostics.whitelist": {
          "type": "array",
          "default": [],
          "description": "Files that match these patterns will be displayed in diagnostics view."
        },
        "cquery.diagnostics.onParse": {
          "type": "boolean",
          "default": true,
          "description": "If true, diagnostics will be reported when a file is parsed (ie, saving or indexed)."
        },
        "cquery.diagnostics.onType": {
          "type": "boolean",
          "default": true,
          "description": "If true, code completion will trigger diagnostic updates."
        },
        "cquery.codeLens.renderInline": {
          "type": "boolean",
          "default": false,
          "description": "Enables a custom code lens renderer so code lens are displayed inline with code. This removes any vertical-space footprint at the cost of horizontal space."
        },
        "cquery.codeLens.onLocalVariables": {
          "type": "boolean",
          "default": false,
          "description": "Set to false to hide code lens on parameters and function local variables."
        },
        "cquery.treeViews.doubleClickTimeoutMs": {
          "type": "number",
          "default": 500,
          "description": "If a tree view entry is double-clicked within this timeout value, vscode will navigate to the entry."
        },
        "cquery.theme.light.inactiveRegion.textColor": {
          "type": "string",
          "default": "rgb(100, 100, 100)",
          "description": "css styling to apply to text when the code region has been disabled by the preprocessor in a light theme."
        },
        "cquery.theme.light.inactiveRegion.backgroundColor": {
          "type": "string",
          "default": "rgba(220, 220, 220, 0.3)",
          "description": "css styling to apply to the background when the code region has been disabled by the preprocessor in a light theme."
        },
        "cquery.theme.dark.inactiveRegion.textColor": {
          "type": "string",
          "default": "rgb(100, 100, 100)",
          "description": "css styling to apply to text when the code region has been disabled by the preprocessor in a dark theme."
        },
        "cquery.theme.dark.inactiveRegion.backgroundColor": {
          "type": "string",
          "default": "rgba(18, 18, 18, 0.3)",
          "description": "css styling to apply to the background when the code region has been disabled by the preprocessor in a dark theme."
        },
        "cquery.completion.enableSnippetInsertion": {
          "type": "boolean",
          "default": true,
          "description": "If true, parameter declarations are inserted as snippets in function/method call arguments when completing a function/method call"
        },
        "cquery.formatting.enabled": {
          "type": "boolean",
          "default": true,
          "description": "If document formatting is enabled/disabled"
        }
      }
    }
  },
  "scripts": {
    "vscode:prepublish": "tsc -p ./",
    "compile": "tsc -watch -p ./",
    "update-vscode": "node ./node_modules/vscode/bin/install",
    "postinstall": "node ./node_modules/vscode/bin/install"
  },
  "devDependencies": {
    "@types/node": "^9.6.14",
    "typescript": "^2.8.3",
    "vsce": "^1.40.0"
  },
  "dependencies": {
    "vscode": "^1.1.17",
    "vscode-languageclient": "^4.1.3"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/cquery-project/vscode-cquery.git"
  }
}
